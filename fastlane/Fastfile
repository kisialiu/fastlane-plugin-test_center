lane :suppress_all do
  suppress_tests(
    xcodeproj: 'AtomicBoy/AtomicBoy.xcodeproj',
    tests: ['AtomicBoyUITests/HappyNapperTests/testBeepingNonExistentFriendDisplaysError', 'AtomicBoyUITests/GrumpyWorkerTests']
  )
end

lane :suppress_one do
  suppress_tests(
    xcodeproj: 'AtomicBoy/AtomicBoy.xcodeproj',
    tests: ['AtomicBoyUITests/HappyNapperTests/testBeepingNonExistentFriendDisplaysError', 'AtomicBoyUITests/GrumpyWorkerTests'],
    scheme: 'Professor'
  )
end

lane :suppressed_for_all do
  UI.message("Suppressed tests for project: #{suppressed_tests(xcodeproj: 'AtomicBoy/AtomicBoy.xcodeproj')}")
end

lane :suppressed_for_one do
  UI.message("Suppressed tests for scheme: #{suppressed_tests(xcodeproj: 'AtomicBoy/AtomicBoy.xcodeproj', scheme: 'Professor')}")
end

lane :suppressed_junits_for_all do
  UI.message("Suppressed tests for project: #{suppress_tests_from_junit(xcodeproj: 'AtomicBoy/AtomicBoy.xcodeproj', junit: 'junit.xml', suppress_type: :failed)}")
end

lane :junit_tests do
  result = tests_from_junit(junit: './spec/fixtures/junit.xml')
  UI.message("Passing tests: #{result[:passing]}")
  UI.message("Failed tests: #{result[:failed]}")
end

lane :test_multiscan do
  multi_scan(
    project: File.absolute_path('../AtomicBoy/AtomicBoy.xcodeproj'),
    scheme: 'AtomicBoy',
    try_count: 3
  )
end

lane :test_multiscan_batch do
  multi_scan(
    project: File.absolute_path('../AtomicBoy/AtomicBoy.xcodeproj'),
    scheme: 'AtomicBoy',
    try_count: 3,
    batch_count: 2
  )
end

lane :test_multiscan_workspace do
  multi_scan(
    workspace: File.absolute_path('../AtomicBoy/AtomicBoy.xcworkspace'),
    scheme: 'AtomicBoy',
    try_count: 3
  )
end

lane :test do
  suppress_all
  suppress_one
  suppressed_for_all
  suppressed_for_one
  suppressed_junits_for_all
  junit_tests
  test_multiscan
end
